<?xml version="1.0" encoding="utf-8" ?>
<rules
    xmlns="http://namespaces.plone.org/diazo"
    xmlns:css="http://namespaces.plone.org/diazo/css"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:fn="http://www.w3.org/2006/xpath-functions"
    xmlns:xi="http://www.w3.org/2001/XInclude">

	<xsl:output indent="yes" />
	<xsl:strip-space elements="*" />
	<xml:template match="comment()"/>

	<xsl:template css:match="ul.globalSectionsLevel1 > li" mode="subnav">
		<xsl:copy>
			<xsl:if css:test=".selected">
				<xsl:attribute name="class">active</xsl:attribute>
			</xsl:if>
			<xsl:element name="a">
				<xsl:copy-of select="a/@href | a/@title" />
				<xsl:copy-of select="a/span/text()" />
			</xsl:element>
		</xsl:copy>
	</xsl:template>

	<xsl:template name="portlet-rows">
		<!-- match id of portal column -->
		<xsl:param name="portal-column" />
		<xsl:param name="columns" />
		<xsl:variable name="portals" select="$portal-column"/>
		<xsl:variable name="count" select="count($portals)"/>
		<xsl:variable name="rows" select="round(($count + ($count mod $columns)) div $columns)"/>

		<xsl:call-template name="portal-rows">
			<xsl:with-param name="currentRow" select="1"/>
			<xsl:with-param name="rows" select="$rows"/>
			<xsl:with-param name="content" select="$portals"/>
			<xsl:with-param name="columns" select="$columns"/>
		</xsl:call-template>
	</xsl:template>

	<xsl:template name="portal-rows">
		<xsl:param name="currentRow"/>
		<xsl:param name="rows"/>
		<xsl:param name="content"/>
		<xsl:param name="columns"/>

		<xsl:element name="div">
			<xsl:attribute name="class">row-fluid</xsl:attribute>
			<xsl:call-template name="portal-column">
				<xsl:with-param name="currentRow" select="$currentRow"/>
				<xsl:with-param name="columns" select="$columns"/>
				<xsl:with-param name="column" select="1"/>
				<xsl:with-param name="content" select="$content"/>
			</xsl:call-template>
		</xsl:element>
		<xsl:if test="$rows > $currentRow">
			<xsl:call-template name="portal-rows">
				<xsl:with-param name="currentRow" select="$currentRow + 1"/>
				<xsl:with-param name="rows" select="$rows"/>
				<xsl:with-param name="content" select="$content"/>
				<xsl:with-param name="columns" select="$columns"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>

	<xsl:template name="portal-column">
		<xsl:param name="currentRow"/>
		<xsl:param name="columns"/>
		<xsl:param name="column"/>
		<xsl:param name="content"/>
		<xsl:variable name="position" select="($currentRow - 1) * $columns + $column"/>
		<xsl:variable name="portlet" select="$content[position() = $position]"/>

		<xsl:if test="$content[position() = $position]">
			<xsl:choose>
				<xsl:when test="contains($portlet/@class, 'News')">
					<xsl:call-template name="portlet-news">
						<xsl:with-param name="portlet" select="$portlet"/>
						<xsl:with-param name="portletClass">
							<xsl:text>span4 med-news</xsl:text>
						</xsl:with-param>
						<xsl:with-param name="portletNews">
							<xsl:text>yes</xsl:text>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:when>
				<xsl:when test="contains($portlet/@class, 'feedmixer') or contains($portlet/@class, 'Rss') or contains($portlet/@class, 'Collection')">
					<xsl:call-template name="portlet-news">
						<xsl:with-param name="portlet" select="$portlet"/>
						<xsl:with-param name="portletClass">
							<xsl:text>span4 med-news</xsl:text>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:when>
				<xsl:when test="contains($portlet/@class, 'Events')">
					<xsl:call-template name="portlet-events">
						<xsl:with-param name="portlet" select="$portlet"/>
						<xsl:with-param name="portletClass">
							<xsl:text>span4 med-events</xsl:text>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:when>
				<xsl:when test="contains($portlet/@class, 'spotlight')">
					<xsl:call-template name="portlet-spotlight">
						<xsl:with-param name="portlet" select="$portlet"/>
						<xsl:with-param name="portletClass">
							<xsl:text>span4 med-spotlight</xsl:text>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:call-template name="portlet-default">
						<xsl:with-param name="portlet" select="$portlet"/>
						<xsl:with-param name="portletClass">
							<xsl:text>span4</xsl:text>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>

		<xsl:if test="$columns > $column">
			<xsl:call-template name="portal-column">
				<xsl:with-param name="currentRow" select="$currentRow"/>
				<xsl:with-param name="columns" select="$columns"/>
				<xsl:with-param name="column" select="$column + 1"/>
				<xsl:with-param name="content" select="$content"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>

	<xsl:template name="portlet-default">
		<xsl:param name="portlet" />
		<xsl:param name="portletClass" />

		<xsl:element name="section">
			<xsl:if test="$portletClass">
				<xsl:attribute name="class">
					<xsl:value-of select="$portletClass"/>
				</xsl:attribute>
			</xsl:if>

			<xsl:choose>
				<xsl:when test="$portlet/dd">
					<xsl:if test="$portlet/dt[contains(@class, 'Header')]">
						<xsl:element name="header">
							<xsl:element name="h1">
								<xsl:copy-of select="$portlet/dt/*"/>
							</xsl:element>
						</xsl:element>
					</xsl:if>
					<xsl:element name="div">
						<xsl:attribute name="class">wrapper</xsl:attribute>
						<xsl:copy-of select="$portlet/dd[contains(@class, 'Item')]/*"/>
					</xsl:element>
					<xsl:if test="$portlet/dd[contains(@class, 'Footer')]">
						<xsl:element name="footer">
							<xsl:copy-of select="$portlet/dd[contains(@class, 'Footer')]"/>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:element name="div">
						<xsl:attribute name="class">wrapper</xsl:attribute>
						<xsl:copy-of select="$portlet/*"/>
					</xsl:element>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:element>
	</xsl:template>

	<xsl:template name="portlet-calendar">
		<xsl:param name="portlet" />
		<xsl:param name="portletClass" />

		<xsl:element name="section">
			<xsl:if test="$portletClass">
				<xsl:attribute name="class">
					<xsl:value-of select="$portletClass"/>
				</xsl:attribute>
			</xsl:if>
			<xsl:element name="header">
				<xsl:element name="h1">
					<xsl:text>Calendar</xsl:text>
				</xsl:element>
			</xsl:element>
			<xsl:element name="div">
				<xsl:attribute name="class">calendar-nav</xsl:attribute>
				<xsl:copy-of select="$portlet/dt/a[1]"/>
				<xsl:copy-of select="$portlet/dt/text()"/>
				<xsl:copy-of select="$portlet/dt/a[2]"/>
			</xsl:element>
			<xsl:element name="table">
				<xsl:attribute name="class">table table-striped table-condensed</xsl:attribute>
				<xsl:copy-of select="$portlet/dd/table/@*[not(local-name() = 'class')]"/>
				<xsl:copy-of select="$portlet/dd/table/*"/>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<xsl:template name="portlet-events">
		<xsl:param name="portlet" />
		<xsl:param name="portletClass" />

		<xsl:element name="section">
			<xsl:if test="$portletClass">
				<xsl:attribute name="class">
					<xsl:value-of select="$portletClass"/>
				</xsl:attribute>
			</xsl:if>
			<xsl:element name="header">
				<xsl:element name="h1">
					<xsl:element name="a">
						<xsl:attribute name="href">
							<xsl:value-of select="$portlet/dt/a/@href"/>
						</xsl:attribute>
						<xsl:text>Events</xsl:text>
					</xsl:element>
				</xsl:element>
				<xsl:element name="h2">
					<xsl:element name="a">
						<xsl:attribute name="href">
							<xsl:value-of select="$portlet/dt/a/@href"/>
						</xsl:attribute>
						<xsl:text>More Events</xsl:text>
					</xsl:element>
				</xsl:element>
			</xsl:element>
			<xsl:element name="ul">
				<xsl:for-each select="$portlet/dd[contains(@class,'portletItem')]">
					<xsl:variable name="dateString" select="./span/span[1]" />
					<xsl:variable name="dateMonthDay" select="substring-before($dateString, ',')" />
					<xsl:variable name="dateMonth" select="substring-before($dateMonthDay, ' ')" />
					<xsl:variable name="dateDay" select="substring-after($dateMonthDay, ' ')" />
					<xsl:variable name="dateYear" select="substring-before(substring-after($dateString, ', '), ' ')" />
					<xsl:element name="li">
						<xsl:element name="a">
							<xsl:copy-of select="./a/@*"/>
							<xsl:element name="span">
								<xsl:attribute name="class">date-bg</xsl:attribute>
								<xsl:element name="span">
									<xsl:attribute name="class">date-month</xsl:attribute>
									<xsl:value-of select="$dateMonth"/>
								</xsl:element>
								<xsl:element name="span">
									<xsl:attribute name="class">date-day</xsl:attribute>
									<xsl:value-of select="$dateDay"/>
								</xsl:element>
							</xsl:element>
							<xsl:element name="span">
								<xsl:attribute name="class">date</xsl:attribute>
								<xsl:value-of select="$dateMonthDay" />
								<xsl:text>, </xsl:text>
								<xsl:value-of select="$dateYear"/>
							</xsl:element>
							<xsl:element name="span">
								<xsl:attribute name="class">event-title</xsl:attribute>
								<xsl:copy-of select="./a/text()"/>
							</xsl:element>
						</xsl:element>
					</xsl:element>
				</xsl:for-each>
			</xsl:element>
			<xsl:element name="footer">
				<xsl:element name="a">
					<xsl:attribute name="href">
						<xsl:value-of select="$portlet/dd[contains(@class,'portletFooter')]/a/@href"/>
					</xsl:attribute>
					<xsl:text>More Events</xsl:text>
				</xsl:element>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<xsl:template name="portlet-navigation">
		<xsl:param name="portlet" />
		<xsl:param name="portletClass" />

		<xsl:element name="section">
			<xsl:if test="$portletClass">
				<xsl:attribute name="class">
					<xsl:value-of select="$portletClass"/>
				</xsl:attribute>
			</xsl:if>

			<xsl:element name="nav">
				<xsl:element name="header">
					<xsl:attribute name="class">visible-phone</xsl:attribute>
					<xsl:element name="h1">
						<xsl:element name="a">
							<xsl:attribute name="href">#med-sidenav-collapse</xsl:attribute>
							<xsl:attribute name="data-toggle">collapse</xsl:attribute>
							<xsl:attribute name="class">chevron-collapse collapsed</xsl:attribute>
							<xsl:text>Navigation </xsl:text>
							<xsl:element name="i">
								<xsl:attribute name="class">glyphicon glyphicon-chevron-right</xsl:attribute>
							</xsl:element>
						</xsl:element>
					</xsl:element>
				</xsl:element>
				<xsl:element name="ul">
					<xsl:attribute name="class">nav nav-pills collapse</xsl:attribute>
					<xsl:attribute name="id">med-sidenav-collapse</xsl:attribute>
					<xsl:for-each select="$portlet/dd/ul/li">
						<xsl:element name="li">
							<xsl:attribute name="class">
								<xsl:value-of select="./@class"/>
							</xsl:attribute>
							<xsl:if test="contains(./a/@class, 'navTreeCurrentItem')">
								<xsl:attribute name="class">
									active <xsl:value-of select="./@class"/>
								</xsl:attribute>
							</xsl:if>
							<xsl:copy-of select="./a | ./div/a"/>
							<xsl:if test="contains(./@class, 'navTreeFolderish')">
								<xsl:element name="ul">
									<xsl:attribute name="class">nav nav-pills</xsl:attribute>
									<xsl:for-each select="./ul/li">
										<xsl:element name="li">
											<xsl:if test="contains(./a/@class, 'navTreeCurrentItem')">
												<xsl:attribute name="class">
													active <xsl:value-of select="./@class"/>
												</xsl:attribute>
											</xsl:if>
											<xsl:copy-of select="./*"/>
										</xsl:element>
									</xsl:for-each>
								</xsl:element>
							</xsl:if>
						</xsl:element>
					</xsl:for-each>
				</xsl:element>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<!-- for news, collections, rss feeds -->
	<xsl:template name="portlet-news">
		<xsl:param name="portlet" />
		<xsl:param name="portletClass" />
		<xsl:param name="portletNews" />

		<xsl:element name="section">
			<xsl:if test="$portletClass">
				<xsl:attribute name="class">
					<xsl:value-of select="$portletClass"/>
				</xsl:attribute>
			</xsl:if>

			<xsl:element name="header">
				<xsl:element name="h1">
					<xsl:choose>
						<xsl:when test="$portlet/dt/a">
							<xsl:copy-of select="$portlet/dt/a"/>
						</xsl:when>
						<xsl:when test="$portlet/dd[contains(@class,'portletFooter')]/a">
							<xsl:element name="a">
								<xsl:attribute name="href">
									<xsl:value-of select="$portlet/dd[contains(@class,'portletFooter')]/a/@href"/>
								</xsl:attribute>
								<xsl:copy-of select="$portlet/dt/*"/>
							</xsl:element>
						</xsl:when>
						<xsl:otherwise>
							<xsl:copy-of select="$portlet/dt/*"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:element>
				<xsl:if test="$portlet/dd[contains(@class,'portletFooter')]//a">
					<xsl:element name="h2">
						<xsl:element name="a">
							<xsl:attribute name="href">
								<xsl:value-of select="$portlet/dd[contains(@class,'portletFooter')]//a/@href"/>
							</xsl:attribute>
							<xsl:choose>
								<xsl:when test="$portletNews">
									<xsl:text>More News</xsl:text>
								</xsl:when>
								<xsl:otherwise>
									<xsl:text>View More</xsl:text>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:element>
					</xsl:element>
				</xsl:if>
			</xsl:element>
			<xsl:element name="ul">
				<xsl:for-each select="$portlet/dd[contains(@class,'portletItem')]">
					<xsl:element name="li">
						<xsl:element name="a">
							<xsl:copy-of select="./a/@*"/>
							<xsl:element name="span">
								<xsl:attribute name="class">date</xsl:attribute>
								<xsl:choose>
									<xsl:when test="$portletNews">
										<xsl:copy-of select="./span/text()"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:copy-of select="./a/span/text()"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:element>
							<xsl:copy-of select="./a/text()"/>
						</xsl:element>
					</xsl:element>
				</xsl:for-each>
			</xsl:element>
			<xsl:element name="footer">
				<xsl:element name="a">
					<xsl:attribute name="href">
						<xsl:value-of select="$portlet/dd[contains(@class,'portletFooter')]//a/@href"/>
					</xsl:attribute>
					<xsl:choose>
						<xsl:when test="$portletNews">
							<xsl:text>More News</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>View More</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:element>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<xsl:template name="portlet-spotlight">
		<xsl:param name="portlet" />
		<xsl:param name="portletClass" />

		<xsl:element name="section">
			<xsl:if test="$portletClass">
				<xsl:attribute name="class">
					<xsl:value-of select="$portletClass"/>
				</xsl:attribute>
			</xsl:if>
			<xsl:if test="$portlet/dt[contains(@class, 'Header')]">
				<xsl:element name="header">
					<xsl:element name="h1">
						<xsl:choose>
							<xsl:when test="$portlet/dt[contains(@class,'portletHeader')]//a">
								<xsl:copy-of select="$portlet/dt[contains(@class,'portletHeader')]//a"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="$portlet/dt[contains(@class,'portletHeader')]/span[not(contains(@class,'portletTop'))]/text()"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:element>
				</xsl:element>
			</xsl:if>
			<xsl:element name="div">
				<xsl:attribute name="class">wrapper</xsl:attribute>
				<xsl:copy-of select="$portlet/dd[contains(@class, 'Item')]/*"/>
			</xsl:element>
			<xsl:if test="$portlet/dd[contains(@class, 'Footer')]">
				<xsl:element name="footer">
					<xsl:copy-of select="$portlet/dd[contains(@class, 'Footer')]/*"/>
				</xsl:element>
			</xsl:if>
		</xsl:element>
	</xsl:template>

	<xsl:template name="landing-nav">
		<xsl:param name="ul"/>

		<xsl:choose>
			<xsl:when test="$ul/li[contains(@class, 'selected')]/ul">
				<xsl:call-template name="landing-nav">
					<xsl:with-param name="ul" select="$ul/li[contains(@class, 'selected')]/ul"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$ul/@class"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<!-- set top/left nav variable -->
	<xsl:variable name="landingPageNav">
		<xsl:call-template name="landing-nav">
			<xsl:with-param name="ul" select="//*[@id='portal-globalnav']"/>
		</xsl:call-template>
	</xsl:variable>

	<!-- homepage qwicks -->
	<xsl:template name="kwicks">
		<xsl:param name="panels" />
		<xsl:param name="ulClasses" />

		<xsl:element name="ul">
			<xsl:attribute name="class">
				<xsl:value-of select="$ulClasses" />
			</xsl:attribute>
			<xsl:for-each select="$panels">
				<xsl:element name="li">
					<xsl:attribute name="class">
						<xsl:copy-of select="substring-after(./dt/span[2]/text(),'kwicks-')" />
					</xsl:attribute>
					<xsl:element name="div">
						<xsl:attribute name="class">panel-shadow</xsl:attribute>
					</xsl:element>
					<xsl:element name="div">
						<xsl:attribute name="class">panel-image</xsl:attribute>
						<xsl:attribute name="style">
							background-image:url('<xsl:value-of select=".//img/@src" />');
						</xsl:attribute>
					</xsl:element>
					<xsl:element name="div">
						<xsl:attribute name="class">panel-content</xsl:attribute>
						<xsl:copy-of select="./dd/p[2]" />
					</xsl:element>
				</xsl:element>
			</xsl:for-each>
		</xsl:element>
	</xsl:template>

	<!-- homepage call to action variable -->
	<xsl:variable name="cta" select="//*[@id='portal-column-two']//*[contains(@class,'call-to-action')]"/>

	<!-- bio page contact variable -->
	<xsl:variable name="bioContact" select="//*[@id='portal-column-one']//*[contains(@class,'bio-contact')]/dd"/>

	<!-- set config variables -->
	<xsl:variable name="siteTemplate" select="//*[@id='hero-rows']//i[@class='site-template'][1]" />
	<xsl:variable name="pageTemplate" select="//*[@id='hero-rows']//i[@class='page-template'][1]" />
	<xsl:variable name="mainLogo" select="//*[@id='hero-rows']//i[@class='main-logo'][1]" />
	<xsl:variable name="mainLogoURL" select="//*[@id='hero-rows']//i[@class='main-logo-url'][1]" />
	<xsl:variable name="departmentTitle" select="//*[@id='hero-rows']//i[@class='department-title'][1]" />
	<xsl:variable name="tabbedPageInitialTabName" select="//*[@id='hero-rows']//i[@class='tabbed-page-initial-tab-name'][1]" />
	<xsl:variable name="navigationLocation" select="//*[@id='hero-rows']//i[@class='navigation-location'][1]" />
	<xsl:variable name="landingPagePortletStart">
		<xsl:choose>
			<xsl:when test="$pageTemplate/text() = 'right-content-top-nav-homepage'">
				<xsl:value-of select="2"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="1"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	<xsl:variable name="rightContentPortlet" select="//*[@id = 'portal-column-two']/div[position() = 1]/dl"/>

	<!-- Attribute Sets-->
	<xsl:attribute-set name="a-accordion-collapse">
		<xsl:attribute name="class">accordion-toggle</xsl:attribute>
		<xsl:attribute name="data-parent">#portlet-accordion</xsl:attribute>
		<xsl:attribute name="data-toggle">collapse</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="a-dropdown-toggle">
		<xsl:attribute name="class">dropdown-toggle</xsl:attribute>
		<xsl:attribute name="data-toggle">dropdown</xsl:attribute>
		<xsl:attribute name="href">#</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="a-folder-toggle" >
		<xsl:attribute name="class">folder-toggle pull-right btn</xsl:attribute>
		<xsl:attribute name="data-toggle">collapse</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="a-toggle-tab">
		<xsl:attribute name="data-toggle">tab</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="a-folder-link">
		<xsl:attribute name="class">folder-link</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="a-feature-button">
		<xsl:attribute name="class">btn btn-small pull-right btn-danger</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="b-caret">
		<xsl:attribute name="class">caret</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="content-main">
		<xsl:attribute name="class">container</xsl:attribute>
		<xsl:attribute name="id">content-main</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="container">
		<xsl:attribute name="class">container</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="div-accordion-group">
		<xsl:attribute name="class">accordion-group</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="div-accordion-heading">
		<xsl:attribute name="class">accordion-heading</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="div-accordion-body">
		<xsl:attribute name="class">accordion-body collapse</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="div-accordion-inner">
		<xsl:attribute name="class">accordion-inner</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="div-portlet-accordion">
		<xsl:attribute name="class">accordion</xsl:attribute>
		<xsl:attribute name="id">portlet-accordion</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="div-tab-content">
		<xsl:attribute name="class">tab-content</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="div-tab-pane">
		<xsl:attribute name="class">tab-pane</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="li-visible-desktop">
		<xsl:attribute name="class">dropdown visible-desktop</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="li-hidden-folder" >
		<xsl:attribute name="class">folder hidden-desktop</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="li-divider">
		<xsl:attribute name="class">divider-vertical</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="li-dropdown">
		<xsl:attribute name="class">dropdown</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="row">
		<xsl:attribute name="class">row</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="row-fluid">
		<xsl:attribute name="class">row-fluid</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="ul-dropdown-menu">
		<xsl:attribute name="class">dropdown-menu</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="ul-nav-pills">
		<xsl:attribute name="class">nav nav-pills</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="ul-nav-list">
		<xsl:attribute name="class">nav nav-list</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="ul-nav-tabs">
		<xsl:attribute name="class">nav nav-tabs</xsl:attribute>
	</xsl:attribute-set>
	<xsl:attribute-set name="ul-nav-pills-collapse">
		<xsl:attribute name="class">nav nav-pills nav-collapse collapse</xsl:attribute>
	</xsl:attribute-set>

	<!-- declare the basic theme template and notheme rules -->
	<theme if-path="login" href="page-inside-noleft-noright.html" />
	<notheme css:if-not-content="#visual-portal-wrapper" />
	<notheme css:if-content="body.template-manage-portlets" />
	<notheme if-content="//body[contains(@class, 'BootstrapRowPortlet')]" />
	<notheme if-content="//body[contains(@class, 'ContentRule')]" />
	<notheme if-content="//body[contains(@class, 'Static')]" />
	<notheme if-content="//body[contains(@class, 'template-portlets')]" />
	<notheme if-content="//body[contains(@class, 'template-plone.portlet.collection')]" />
	<notheme if-content="//body[contains(@class, 'portlet.feedmixer')]" />
	<notheme css:if-content="body.template-overview-controlpanel" />
	<notheme css:if-content="body.template-atct_edit" />
	<notheme css:if-content="body.template-base_edit" />
	<notheme css:if-content="body.template-edit" />
	<notheme css:if-content="body.template-localcss-settings" />
	<notheme css:if-content="body.template-calendar-controlpanel" />
	<notheme css:if-content="body.template-prefs_install_products_form" />
	<notheme css:if-content="body.section-portal_registry" />
	<notheme css:if-content="body.template-discussion-settings" />
	<notheme css:if-content="body.template-rules-controlpanel" />
	<notheme css:if-content="body.template-editing-controlpanel" />
	<notheme css:if-content="body.template-prefs_error_log_form" />
	<notheme css:if-content="body.template-filter-controlpanel" />
	<notheme css:if-content="body.template-imaging-controlpanel" />
	<notheme css:if-content="body.template-language-controlpanel" />
	<notheme css:if-content="body.template-mail-controlpanel" />
	<notheme css:if-content="body.template-maintenance-controlpanel" />
	<notheme css:if-content="body.template-markup-controlpanel" />
	<notheme css:if-content="body.template-navigation-controlpanel" />
	<notheme css:if-content="body.template-search-controlpanel" />
	<notheme css:if-content="body.template-security-controlpanel" />
	<notheme css:if-content="body.template-site-controlpanel" />
	<notheme css:if-content="body.template-skins-controlpanel" />
	<notheme css:if-content="body.template-tinymce-controlpanel" />
	<notheme css:if-content="body.template-types-controlpanel" />
	<notheme css:if-content="body.template-dropdownmenu-settings" />
	<notheme css:if-content="body.template-googleanalytics-settings" />
	<notheme css:if-content="body.template-jqueryui-controlpanel" />
	<notheme css:if-content="body.template-jqueryui-plugins-controlpanel" />
	<notheme css:if-content="body.template-jqueryui-sunburst-controlpanel" />
	<notheme css:if-content="body.template-ldap-controlpanel" />
	<notheme css:if-content="body.template-typekit-settings" />
	<notheme css:if-content="body.template-hnfpicker-settings" />
	<notheme css:if-content="body.template-useractions" />
	<notheme css:if-content="body.template-manage-elements" />
	<notheme if-path="folder_rename_form" />
	<notheme if-path="folder_constraintypes_form" />
	<notheme css:if-content="#edit-bar" if="$preview_mode != 'True'" />
	<notheme if="$ajax_load" />

	<!-- this rules block is always executed -->
	<rules>
		<!-- login screen adjust -->
		<drop css:theme=".hero-content > .hero-inner, #breadcrumb-social" if-path="login" />

		<theme href="page-inside.html" />

		<!-- drop the static resource links of the theme -->
		<drop theme="/html/head/style" />
		<drop theme="/html/head/script" />
		<drop theme="/html/body/script[@class='delete']" />
		<drop css:theme="html>head>meta[name!='viewport']" />
		<drop theme="html/head/link[not(@id='navbarcss' or contains(@class,'themecss'))]" />

		<!-- keep theme-specific css, drop the rest -->
		<rules if="$siteTemplate = 'hsc'">
			<drop theme="html/head/link[contains(@class,'site-theme') and not(contains(@class,'hsc-theme'))]" />
		</rules>
		<rules if="$siteTemplate = 'medicine'">
			<drop theme="html/head/link[contains(@class,'site-theme') and not(contains(@class,'medicine-theme'))]" />
		</rules>
		<rules if="$siteTemplate = 'dentistry'">
			<drop theme="html/head/link[contains(@class,'site-theme') and not(contains(@class,'dentistry-theme'))]" />
		</rules>
		<rules if="$siteTemplate = 'nursing'">
			<drop theme="html/head/link[contains(@class,'site-theme') and not(contains(@class,'nursing-theme'))]" />
		</rules>

		<!-- IE best practices require meta and base tags before any other elements -->
		<before theme-children="/html/head" css:content="html>head>meta[name!='viewport']" />
		<replace css:theme="base" css:content="base" />
		<replace theme="/html/head/title" content="/html/head/title"/>

		<!-- loop through the link tags (css files) from plone and choose the ones you want.  This should be the base css file located in uofl.basetheme and certain add-ons -->
		<after theme="/html/head/link[3]" content="/html/head/link[not(contains(@href, 'headers')) and not(contains(@href, 'bootstrap')) and not(contains(@href, 'navbar')) and not(contains(@href, 'prefooters')) and not(contains(@href, 'portlets')) and contains(@href, 'p4basetheme') or contains(@href, 'solgema') or contains(@href, 'calendar')]" />

		<!-- style elements go last -->
		<after content="/html/head/style" theme-children="/html/head" />

		<!-- script tags go at the end before the theme defined -->
		<drop css:theme="body > script.noscript" />
		<before content="/html/head/script[not(contains(@src, 'respond.min.js')) and not(contains(@src, '/bootstrap.js')) and contains(@src, 'p4basetheme')] | /html/head/script[not(@src) and not(contains(text(), 'datepicker'))]" theme="/html/body/script[2]" />
		<after content="/html/head/script[contains(@src, 'flowplayer')] | /html/head/script[contains(@src, 'typekit')]" theme="/html/head/*[last()]" />
		<!-- delete carousel JS if not needed -->
		<drop if-not-content="//div[starts-with(@id, 'carousel-')]" css:theme="script.carouseljs" />

		<!-- merge the body classes -->
		<merge attributes="class" css:theme="body" css:content="body" />

		<!-- re-set skip navigation anchor -->
		<replace css:theme=".reader-skip">
			<xsl:element name="a">
				<xsl:attribute name="href">#view-main-content</xsl:attribute>
				<xsl:attribute name="class">reader-skip</xsl:attribute>
				<xsl:text>Skip to Main Content</xsl:text>
			</xsl:element>
		</replace>

		<!-- set the global elements from uofl.basetheme -->
		<!-- insert upperbar -->
		<replace css:theme-children="#upperbar .account">
			<xsl:for-each css:select="#upperbar .account > li">
				<xsl:choose>
					<xsl:when test="position() = '1'">
						<xsl:element name="li">
							<xsl:element name="a">
								<xsl:attribute name="href">http://louisville.edu</xsl:attribute>
								<xsl:element name="i">
									<xsl:attribute name="class">glyphicon glyphicon-home</xsl:attribute>
								</xsl:element>
								<xsl:text>Louisville.edu</xsl:text>
							</xsl:element>
						</xsl:element>
						<xsl:element name="li">
							<xsl:element name="a">
								<xsl:attribute name="href">http://louisville.edu/hsc</xsl:attribute>
								<xsl:attribute name="class">hsc-link</xsl:attribute>
								<xsl:element name="i">
									<xsl:attribute name="class">glyphicon glyphicon-globe</xsl:attribute>
								</xsl:element>
								<xsl:text>Health Sciences Center</xsl:text>
							</xsl:element>
						</xsl:element>
					</xsl:when>
					<xsl:when test="position() = '2' or ./@class = 'dropdown'">
						<xsl:element name="li">
							<xsl:attribute name="class">dropdown hidden-phone</xsl:attribute>
							<xsl:element name="a" use-attribute-sets="a-dropdown-toggle">
								<xsl:element name="i">
									<xsl:attribute name="class">glyphicon glyphicon-user</xsl:attribute>
								</xsl:element>
								<xsl:value-of select="./a//text()"/>
								<xsl:element name="b">
									<xsl:attribute name="class">caret</xsl:attribute>
								</xsl:element>
							</xsl:element>
							<xsl:element name="ul">
								<xsl:attribute name="class">dropdown-menu pull-right</xsl:attribute>
								<xsl:choose>
									<xsl:when test="$siteTemplate = 'medicine' and position() = '2'">
										<xsl:for-each select="./ul/li">
											<xsl:choose>
												<xsl:when test="position() = last()">
													<xsl:element name="li">
														<xsl:element name="a">
															<xsl:attribute name="href">http://redmed.louisville.edu</xsl:attribute>
															<xsl:text>RedMed</xsl:text>
														</xsl:element>
													</xsl:element>
													<xsl:element name="li">
														<xsl:attribute name="class">divider</xsl:attribute>
													</xsl:element>
													<xsl:copy-of select="."/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:copy-of select="."/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:copy-of select="./ul/li"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:element>
						</xsl:element>
						<xsl:element name="li">
							<xsl:attribute name="class">visible-phone</xsl:attribute>
							<xsl:element name="a">
								<xsl:attribute name="data-toggle">collapse</xsl:attribute>
								<xsl:attribute name="class">upperbar-accounts-collapse collapsed chevron-collapse visible-phone</xsl:attribute>
								<xsl:attribute name="href">
									#account-dropdown-<xsl:value-of select="position()"/>
								</xsl:attribute>
								<xsl:value-of select="./a//text()"/>
								<xsl:element name="i">
									<xsl:attribute name="class">glyphicon glyphicon-chevron-right visible-phone</xsl:attribute>
								</xsl:element>
							</xsl:element>
							<xsl:element name="div">
								<xsl:attribute name="class">account-collapse collapse</xsl:attribute>
								<xsl:attribute name="id">
									account-dropdown-<xsl:value-of select="position()"/>
								</xsl:attribute>
								<xsl:element name="ul">
									<xsl:choose>
										<xsl:when test="$siteTemplate = 'medicine' and position() = '2'">
											<xsl:for-each select="./ul/li">
												<xsl:choose>
													<xsl:when test="position() = last()">
														<xsl:element name="li">
															<xsl:element name="a">
																<xsl:attribute name="href">http://redmed.louisville.edu</xsl:attribute>
																<xsl:text>RedMed</xsl:text>
															</xsl:element>
														</xsl:element>
														<xsl:copy-of select="."/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:if test="not(contains(./@class,'divider'))">
															<xsl:copy-of select="."/>
														</xsl:if>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<xsl:copy-of select="./ul/li"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:element>
							</xsl:element>
						</xsl:element>
					</xsl:when>
					<xsl:otherwise>
						<xsl:copy-of select="."/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</replace>

		<!-- depending on theme, remove lowerbar -->
		<rules if="$siteTemplate = 'hsc'">
			<drop css:theme="#lowerbar > .non-hsc" />
		</rules>
		<rules if-not="$siteTemplate = 'hsc'">
			<drop css:theme="#lowerbar > .hsc" />
		</rules>

		<!-- insert lowerbar logo -->
		<replace css:theme="#lowerbar a[class*='logo']">
			<xsl:element name="a">
				<xsl:attribute name="href">
					<xsl:choose>
						<xsl:when test="$mainLogoURL/text()">
							<xsl:copy-of select="$mainLogoURL/text()"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="//ul[@id='portal-globalnav']/li[1]/a/@href"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				<xsl:attribute name="class">logo</xsl:attribute>
				<xsl:copy-of select="$mainLogo/*"/>
			</xsl:element>
		</replace>

		<!-- insert lowerbar search form -->
		<replace css:theme="#lowerbar form.search">
			<xsl:element name="form">
				<xsl:attribute name="class">search</xsl:attribute>
				<xsl:attribute name="method">
					<xsl:value-of select="//*[@id='lowerbar']/div/form/@method"/>
				</xsl:attribute>
				<xsl:attribute name="action">
					<xsl:value-of select="//*[@id='lowerbar']/div/form/@action"/>
				</xsl:attribute>
				<xsl:variable name="searchform" select="//*[@id='lowerbar']/div/form" />
				<xsl:for-each select="$searchform/*">
					<xsl:if test="contains(./@type,'hidden') or name() = 'label'">
						<xsl:copy-of select="."/>
					</xsl:if>
				</xsl:for-each>
				<xsl:element name="div">
					<xsl:attribute name="class">input-append</xsl:attribute>
					<xsl:for-each select="$searchform/*">
						<xsl:if test="not(contains(./@type,'hidden') or name() = 'label')">
							<xsl:copy-of select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:element>
			</xsl:element>
		</replace>

		<!-- masthead portlet items -->
		<replace css:theme="#masthead-nav" css:content="#masthead-nav" />
		<replace css:theme="#lowerbar .social" css:content-children="#masthead-social" />

		<!-- breadcrumbs -->
		<replace css:theme-children="#breadcrumb-social .breadcrumb">
			<xsl:for-each select="//*[@id='portal-breadcrumbs']/span">
				<xsl:if test="position() != 1">
					<xsl:element name="li">
						<xsl:choose>
							<xsl:when test="position() != last()">
								<xsl:copy-of select="./a"/>
								<xsl:element name="span">
									<xsl:attribute name="class">divider</xsl:attribute>
									<xsl:text>/</xsl:text>
								</xsl:element>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="./span"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:element>
				</xsl:if>
			</xsl:for-each>
		</replace>

		<!-- social sharing header/footer -->
		<replace css:theme=".social-icons-horizontal" css:content=".social-icons-horizontal" />

		<!-- HSC theme hero content -->
		<!-- search for the most "recent" hero image and use -->
		<!-- search for the most "recent" hero panel and use -->
		<rules if="$siteTemplate = 'hsc' and not($pageTemplate = 'homepage')">
			<drop css:theme=".hero-content .hero-inner .hero-image" />
			<before css:theme-children=".hero-content .hero-inner">
				<xsl:element name="div">
					<xsl:attribute name="class">hero-image</xsl:attribute>
					<xsl:attribute name="style">
						background-image:url(<xsl:value-of select="//*[@id='hero-rows']//*[contains(@class,'hero-image')][1]//img/@src"/>);
					</xsl:attribute>
					<xsl:if test="//*[@id='hero-rows']//*[contains(@class,'hero-panel')][1]">
						<xsl:element name="div">
							<xsl:attribute name="class">hero-panel</xsl:attribute>
							<xsl:copy-of select="//*[@id='hero-rows']//*[contains(@class,'hero-panel')][1]/dd/*[not(contains(@class,'portletBottom'))]"/>
						</xsl:element>
					</xsl:if>
				</xsl:element>
			</before>
		</rules>

		<!-- prefooter -->
		<replace css:theme="#prefooter" css:content="#prefooter" />

		<!-- footer -->
		<replace css:theme="body > footer" css:content="body > div > footer" />

		<!-- choose your template -->
		<!-- check for the following order of items
			if config is set
				if main page
					main page theme
				if left-nav page
					left-nav theme
				if top-nav page
					top-nav theme
				if bio page
					bio theme
			else check for portlets // no true ELSE in diazo xslt... :-/
				if no column one
					if no column two
						single column theme
					else
						no left theme
				if no column two
					if no column one
						single column theme
					else
						no right theme
			end of checks
		-->
		<rules css:if-content="#hero-rows .portlet-static-config">
			<!-- check for main homepage -->
			<rules if="$pageTemplate/text() = 'homepage'">
				<theme href="page-homepage.html" />
				<!-- carousel -->
				<replace css:theme-children=".med-hero .med-hero-wrapper" css:content="#hero-rows .portlet-static-hero-slider .portletItem div.slide" />

				<!-- kwicks hero content -->
				<replace css:theme-children=".hero-content .hero-inner">
					<xsl:call-template name="kwicks">
						<xsl:with-param name="panels" select="//*[@id='hero-rows']/*[contains(@class, '-kwicks-')]" />
						<xsl:with-param name="ulClasses">kwicks kwicks-horizontal hidden-phone</xsl:with-param>
					</xsl:call-template>
					<xsl:call-template name="kwicks">
						<xsl:with-param name="panels" select="//*[@id='hero-rows']/*[contains(@class, '-kwicks-')]" />
						<xsl:with-param name="ulClasses">kwicks kwicks-vertical visible-phone</xsl:with-param>
					</xsl:call-template>
				</replace>

				<!-- call to action -->
				<drop css:if-not-content=".portlet-static-call-to-action" css:theme=".container.cta" />
				<replace css:theme-children=".container.cta .row-fluid">
					<xsl:choose>
						<xsl:when test="$cta/dd[@class='portletFooter']">
							<xsl:element name="div">
								<xsl:attribute name="class">span9</xsl:attribute>
								<xsl:copy-of select="$cta/dd[contains(@class,'portletItem')]/*[not(contains(@class,'portlet'))]"/>
							</xsl:element>
							<xsl:element name="div">
								<xsl:attribute name="class">span3</xsl:attribute>
								<xsl:copy-of select="$cta/dd[@class='portletFooter']//a"/>
							</xsl:element>
						</xsl:when>
						<xsl:otherwise>
							<xsl:element name="div">
								<xsl:attribute name="class">span12</xsl:attribute>
								<xsl:copy-of select="$cta/dd[contains(@class,'portletItem')]/*[not(contains(@class,'portlet'))]"/>
							</xsl:element>
						</xsl:otherwise>
					</xsl:choose>
				</replace>

				<!-- focal portlets -->
				<replace css:theme-children="#main-content.homepage .focal">
					<xsl:choose>
						<xsl:when test="$siteTemplate = 'hsc'">
							<xsl:for-each select="//*[@id='portal-column-one']//*[contains(@class,'portlet-static-focal')]">
								<xsl:element name="div">
									<xsl:attribute name="class">span4</xsl:attribute>
									<xsl:attribute name="style">
										background-image:url('<xsl:value-of select="./dd//img/@src"/>')
									</xsl:attribute>
									<xsl:element name="div">
										<xsl:attribute name="class">wrapper</xsl:attribute>
										<xsl:copy-of select="./dd/*"/>
									</xsl:element>
								</xsl:element>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="//*[@id='portal-column-one']//*[contains(@class,'portlet-static-focal')]">
								<xsl:element name="div">
									<xsl:attribute name="class">span4</xsl:attribute>
									<xsl:copy-of select="./dd/*"/>
								</xsl:element>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</replace>

				<!-- middle row portlets -->
				<replace theme="//*[@id='main-content']/*[contains(@class,'row-fluid')][2]">
					<xsl:element name="div">
						<xsl:attribute name="class">row-fluid</xsl:attribute>
						<xsl:for-each select="//*[@id='portal-column-two']/div[not(contains(./@class,'managePortletsLink'))]/dl">
							<xsl:choose>
								<xsl:when test="contains(./@class,'call-to-action')"></xsl:when>
								<xsl:when test="contains(./@class, 'News')">
									<xsl:call-template name="portlet-news">
										<xsl:with-param name="portlet" select="."/>
										<xsl:with-param name="portletClass">
											<xsl:text>span3 med-news</xsl:text>
										</xsl:with-param>
										<xsl:with-param name="portletNews">
											<xsl:text>yes</xsl:text>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:when>
								<xsl:when test="contains(./@class, 'feedmixer') or contains(./@class, 'Rss')">
									<xsl:call-template name="portlet-news">
										<xsl:with-param name="portlet" select="."/>
										<xsl:with-param name="portletClass">
											<xsl:text>span3 med-news</xsl:text>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:when>
								<xsl:when test="contains(./@class, 'Events')">
									<xsl:call-template name="portlet-events">
										<xsl:with-param name="portlet" select="."/>
										<xsl:with-param name="portletClass">
											<xsl:text>span3 med-events</xsl:text>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:when>
								<xsl:when test="contains(./@class, 'spotlight')">
									<xsl:call-template name="portlet-spotlight">
										<xsl:with-param name="portlet" select="."/>
										<xsl:with-param name="portletClass">
											<xsl:text>span3 med-spotlight</xsl:text>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:when>
								<xsl:otherwise>
									<xsl:call-template name="portlet-default">
										<xsl:with-param name="portlet" select="."/>
										<xsl:with-param name="portletClass">
											<xsl:text>span3</xsl:text>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:element>
				</replace>

				<!-- bottom row portlets pulled from content -->
				<replace css:theme-children="#main-content .row-nostyle" css:content-children="#content-core > div" />
				<drop css:theme="hr.hr-bottom, .homepage > .row-nostyle" css:if-not-content="#content-core > div > *" />
			</rules>

			<!-- check for left-nav homepage -->
			<rules if="$pageTemplate/text() = 'left-nav-homepage'">
				<theme href="page-landing-leftnav.html" />

				<!-- left-hand navigation -->
				<before theme-children="//*[contains(@class,'med-landing-left')]//nav/header/h1/a">
					<xsl:attribute name="href">.med-landing-left .left-nav-collapse</xsl:attribute>
				</before>
				<replace css:theme-children=".landing-page nav > ul">
					<xsl:element name="li">
						<xsl:element name="a">
							<xsl:attribute name="href">
								<xsl:value-of select="//li[contains(@class,'selected')]/ul[contains(@class,$landingPageNav)]/preceding-sibling::a/@href"/>
							</xsl:attribute>
							<xsl:text>Home</xsl:text>
						</xsl:element>
					</xsl:element>
					<xsl:for-each select="//li[contains(@class, 'selected')]/ul[@class=$landingPageNav]/li">
						<xsl:choose>
							<xsl:when test="contains(./a/@class,'hasChildrens')">
								<xsl:element name="li">
									<xsl:attribute name="class">folder visible-phone</xsl:attribute>
									<xsl:element name="a">
										<xsl:attribute name="class">folder-toggle collapsed pull-right</xsl:attribute>
										<xsl:attribute name="data-toggle">collapse</xsl:attribute>
										<xsl:attribute name="href">
											<xsl:value-of select="concat('#folder',position())"/>
										</xsl:attribute>
										<xsl:element name="i">
											<xsl:attribute name="class">glyphicon glyphicon-chevron-right</xsl:attribute>
										</xsl:element>
									</xsl:element>
									<xsl:element name="a">
										<xsl:attribute name="class">folder-link</xsl:attribute>
										<xsl:copy-of select="./a/@href"/>
										<xsl:value-of select="./a/span"/>
									</xsl:element>
									<xsl:element name="ul">
										<xsl:attribute name="class">nav nav-pills nav-collapse collapse</xsl:attribute>
										<xsl:attribute name="id">
											<xsl:value-of select="concat('folder',position())"/>
										</xsl:attribute>
										<xsl:for-each select="./ul/li">
											<xsl:element name="li">
												<xsl:copy-of select="./a"/>
											</xsl:element>
										</xsl:for-each>
									</xsl:element>
								</xsl:element>
								<xsl:element name="li">
									<xsl:attribute name="class">dropdown hidden-phone</xsl:attribute>
									<xsl:element name="a" use-attribute-sets="a-dropdown-toggle">
										<xsl:element name="i">
											<xsl:attribute name="class">glyphicon glyphicon-chevron-right</xsl:attribute>
										</xsl:element>
									</xsl:element>
									<xsl:element name="a">
										<xsl:copy-of select="./a/@href"/>
										<xsl:value-of select="./a/span"/>
									</xsl:element>
									<xsl:element name="ul">
										<xsl:attribute name="class">dropdown-menu</xsl:attribute>
										<xsl:for-each select="./ul/li">
											<xsl:element name="li">
												<xsl:copy-of select="./a"/>
											</xsl:element>
										</xsl:for-each>
									</xsl:element>
								</xsl:element>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="."/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
					<xsl:if test="//*[@id='portal-column-one']//*[contains(@class,'nav-bottom-item')]">
						<xsl:element name="li">
							<xsl:attribute name="class">folder nav-social</xsl:attribute>
							<xsl:copy-of select="//*[@id='portal-column-one']//*[contains(@class,'nav-bottom-item')]/dd[contains(@class,'portletItem')]/*"/>
						</xsl:element>
					</xsl:if>
				</replace>
			</rules>

			<!-- check for right-content top-nav homepage -->
			<rules if="$pageTemplate/text() = 'right-content-top-nav-homepage'">
				<theme href="page-landing-topnav-rightcontent.html" />

				<replace css:theme=".main-content > .row-fluid > .span3">
					<xsl:choose>
						<xsl:when test="contains($rightContentPortlet/@class, 'News')">
							<xsl:call-template name="portlet-news">
								<xsl:with-param name="portlet" select="$rightContentPortlet"/>
								<xsl:with-param name="portletClass">
									<xsl:text>span3 med-news</xsl:text>
								</xsl:with-param>
								<xsl:with-param name="portletNews">
									<xsl:text>yes</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains($rightContentPortlet/@class, 'feedmixer') or contains($rightContentPortlet/@class, 'Rss') or contains($rightContentPortlet/@class, 'Collection')">
							<xsl:call-template name="portlet-news">
								<xsl:with-param name="portlet" select="$rightContentPortlet"/>
								<xsl:with-param name="portletClass">
									<xsl:text>span3 med-news</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains($rightContentPortlet/@class, 'Events')">
							<xsl:call-template name="portlet-events">
								<xsl:with-param name="portlet" select="$rightContentPortlet"/>
								<xsl:with-param name="portletClass">
									<xsl:text>span3 med-events</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains($rightContentPortlet/@class, 'spotlight')">
							<xsl:call-template name="portlet-spotlight">
								<xsl:with-param name="portlet" select="$rightContentPortlet"/>
								<xsl:with-param name="portletClass">
									<xsl:text>span3 med-spotlight</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:otherwise>
							<xsl:call-template name="portlet-default">
								<xsl:with-param name="portlet" select="$rightContentPortlet"/>
								<xsl:with-param name="portletClass">
									<xsl:text>span3</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:otherwise>
					</xsl:choose>
				</replace>
			</rules>

			<!-- check for top-nav homepage -->
			<!-- $pageTemplate/text() = 'top-nav-homepage' -->
			<rules if="contains($pageTemplate/text(), 'top-nav-homepage')">
				<theme href="page-landing-topnav.html" />

				<!-- top navigation -->
				<before theme-children="//*[contains(@class,'med-landing-top')]//nav/header/h1/a">
					<xsl:attribute name="href">#top-nav-collapse</xsl:attribute>
				</before>
				<replace css:theme-children=".landing-page nav > ul">
					<xsl:element name="li">
						<xsl:element name="a">
							<xsl:attribute name="href">
								<xsl:value-of select="//li[contains(@class,'selected')]/ul[contains(@class,$landingPageNav)]/preceding-sibling::a/@href"/>
							</xsl:attribute>
							<xsl:text>Home</xsl:text>
						</xsl:element>
					</xsl:element>
					<xsl:for-each select="//li[contains(@class, 'selected')]/ul[@class=$landingPageNav]/li">
						<xsl:choose>
							<xsl:when test="contains(./a/@class,'hasChildrens')">
								<xsl:element name="li">
									<xsl:attribute name="class">folder visible-phone</xsl:attribute>
									<xsl:element name="a">
										<xsl:attribute name="class">folder-toggle collapsed pull-right</xsl:attribute>
										<xsl:attribute name="data-toggle">collapse</xsl:attribute>
										<xsl:attribute name="href">
											<xsl:value-of select="concat('#folder',position())"/>
										</xsl:attribute>
										<xsl:element name="i">
											<xsl:attribute name="class">glyphicon glyphicon-chevron-right</xsl:attribute>
										</xsl:element>
									</xsl:element>
									<xsl:element name="a">
										<xsl:attribute name="class">folder-link</xsl:attribute>
										<xsl:copy-of select="./a/@href"/>
										<xsl:value-of select="./a/span"/>
									</xsl:element>
									<xsl:element name="ul">
										<xsl:attribute name="class">nav nav-pills nav-collapse collapse</xsl:attribute>
										<xsl:attribute name="id">
											<xsl:value-of select="concat('folder',position())"/>
										</xsl:attribute>
										<xsl:for-each select="./ul/li">
											<xsl:element name="li">
												<xsl:copy-of select="./a"/>
											</xsl:element>
										</xsl:for-each>
									</xsl:element>
								</xsl:element>
								<xsl:element name="li">
									<xsl:attribute name="class">dropdown hidden-phone</xsl:attribute>
									<xsl:element name="a">
										<xsl:copy-of select="./a/@href"/>
										<xsl:value-of select="./a/span"/>
									</xsl:element>
									<xsl:element name="a" use-attribute-sets="a-dropdown-toggle">
										<xsl:element name="i">
											<xsl:attribute name="class">glyphicon glyphicon-chevron-down</xsl:attribute>
										</xsl:element>
									</xsl:element>
									<xsl:element name="ul">
										<xsl:attribute name="class">
											<xsl:choose>
												<xsl:when test="position() = last()">
													<xsl:text>dropdown-menu pull-right</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:text>dropdown-menu</xsl:text>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
										<xsl:for-each select="./ul/li">
											<xsl:element name="li">
												<xsl:copy-of select="./a"/>
											</xsl:element>
										</xsl:for-each>
									</xsl:element>
								</xsl:element>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="."/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
				</replace>
			</rules>

			<!-- common items for both top and left nav homepages and variants -->
			<!-- $pageTemplate/text() = 'left-nav-homepage' or $pageTemplate/text() = 'top-nav-homepage' -->
			<rules if="contains($pageTemplate/text(),'-homepage')">
				<!-- add title -->
				<replace css:theme-children="#breadcrumb-social h1" css:content-children="#parent-fieldname-title" />

				<!-- insert carousel -->
				<replace css:theme-children=".landing-page .med-hero .med-hero-wrapper" css:content="#hero-rows .portlet-static-hero-slider .portletItem div.slide" />

				<!-- call to action or hr -->
				<replace css:theme-children=".landing-page .cta .row-fluid">
					<xsl:choose>
						<xsl:when test="$cta/dd[@class='portletFooter']">
							<xsl:element name="div">
								<xsl:attribute name="class">span9</xsl:attribute>
								<xsl:copy-of select="$cta/dd[contains(@class,'portletItem')]/*[not(contains(@class,'portlet'))]"/>
							</xsl:element>
							<xsl:element name="div">
								<xsl:attribute name="class">span3</xsl:attribute>
								<xsl:copy-of select="$cta/dd[@class='portletFooter']//a"/>
							</xsl:element>
						</xsl:when>
						<xsl:otherwise>
							<xsl:element name="div">
								<xsl:attribute name="class">span12</xsl:attribute>
								<xsl:copy-of select="$cta/dd[contains(@class,'portletItem')]/*[not(contains(@class,'portlet'))]"/>
							</xsl:element>
						</xsl:otherwise>
					</xsl:choose>
				</replace>
				<replace css:if-not-content=".portlet-static-call-to-action" css:theme=".landing-page .cta">
					<hr class="hr-top" />
				</replace>

				<!-- middle row portlets -->
				<!-- drop the Call to Action if not used -->
				<drop theme="//*[contains(@class,'landing-page')]/*[contains(@class,'middle-content')]" if="count(//*[@id='portal-column-two']/div[not(contains(@class,'managePortletsLink'))]/dl[not(contains(@class,'call-to-action'))]) = 0" />
				<!-- or add Call to Action -->
				<replace theme="//*[contains(@class,'landing-page')]/*[contains(@class,'middle-content')]">
					<xsl:call-template name="portlet-rows">
						<xsl:with-param name="portal-column" select="//*[@id='portal-column-two']/div[not(contains(@class, 'managePortletsLink')) and position() >= $landingPagePortletStart]/*[not(contains(@class,'call-to-action'))]"/>
						<xsl:with-param name="columns" select="3"/>
					</xsl:call-template>
				</replace>

				<drop css:theme="#main-content hr.hr-bottom" css:if-not-content="#portal-column-two" />

				<!-- bottom row content -->
				<replace css:theme-children=".landing-page .bottom-content" css:content-children="#content-core > div" />
				<drop css:theme="hr.hr-bottom, .homepage > .row-nostyle" css:if-not-content="#content-core > div > *" />
			</rules>

			<!-- check for bio page -->
			<rules if="$pageTemplate/text() = 'bio-page'">
				<theme href="page-bio.html" />
				<replace css:theme-children="#main-content.bio-page > header > h1" content-children="//h1[@id='parent-fieldname-title']" />
				<replace css:theme-children="#main-content.bio-page > header > h2" content-children="$bioContact/h2" />
				<replace css:theme-children="#main-content.bio-page > header > h3" content-children="$bioContact/h3" />
				<replace css:theme-children="#main-content.bio-page > header > p">
					<xsl:for-each select="$bioContact/ul/li">
						<xsl:choose>
							<xsl:when test="local-name(./*) != ''">
								<xsl:copy-of select="./*"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="./text()"/>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:if test="position() != last()">
							<xsl:text> </xsl:text>
							<xsl:element name="span">
								<xsl:attribute name="class">bullet</xsl:attribute>
								<xsl:text>&#8226;</xsl:text>
							</xsl:element>
							<xsl:text> </xsl:text>
						</xsl:if>
					</xsl:for-each>
				</replace>
				<!-- transform left portlets -->
				<drop if="count(//*[@id='portal-column-one']/div/dl[contains(@class,'bio-') and not(contains(@class,'bio-contact'))]) = 0" css:theme=".bio-page aside.med-sidebars" />
				<replace css:theme-children="#main-content.bio-page aside.med-sidebars">
					<xsl:for-each select="//*[@id='portal-column-one']/div">
						<xsl:choose>
							<xsl:when test="contains(./dl/@class, 'bio-picture')">
								<xsl:element name="section">
									<xsl:attribute name="class">bio-picture</xsl:attribute>
									<xsl:copy-of select="./dl/dd//img"/>
								</xsl:element>
							</xsl:when>
							<xsl:when test="contains(./dl/@class, 'bio-info')">
								<xsl:element name="section">
									<xsl:attribute name="class">bio-info</xsl:attribute>
									<xsl:copy-of select="./dl/dd/*"/>
								</xsl:element>
							</xsl:when>
							<xsl:when test="contains(./dl/@class, 'bio-ulp')">
								<xsl:element name="section">
									<xsl:attribute name="class">bio-ulp</xsl:attribute>
									<xsl:copy-of select="./dl/dd/*"/>
								</xsl:element>
							</xsl:when>
							<xsl:otherwise></xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
				</replace>
			</rules>

			<!-- add department title -->
			<drop if="not($departmentTitle) and not(contains($pageTemplate/text(),'-nav-homepage'))" theme="//*[@id='breadcrumb-social']/div[1]" />
			<replace if-content="$departmentTitle" theme-children="//*[@id='breadcrumb-social']/div[1]/div/h1" content-children="$departmentTitle" />

			<!-- top-level navigation -->
			<rules if="not($pageTemplate/text() = 'bio-page') and not($pageTemplate/text() = 'homepage') and not(contains($pageTemplate/text(), '-nav-homepage')) and $navigationLocation = 'top'">
				<after css:theme="#breadcrumb-social">
					<xsl:element name="div">
						<xsl:attribute name="class">container normal-top-nav hidden-phone</xsl:attribute>
						<xsl:element name="nav">
							<xsl:element name="header">
								<xsl:attribute name="class">visible-phone</xsl:attribute>
								<xsl:element name="h1">
									<xsl:element name="a">
										<xsl:attribute name="href">#top-nav-collapse</xsl:attribute>
										<xsl:attribute name="class">chevron-collapse collapsed</xsl:attribute>
										<xsl:attribute name="data-toggle">collapse</xsl:attribute>
										<xsl:text>Navigation </xsl:text>
										<xsl:element name="i">
											<xsl:attribute name="class">glyphicon glyphicon-chevron-right</xsl:attribute>
										</xsl:element>
									</xsl:element>
								</xsl:element>
							</xsl:element>
							<xsl:element name="ul">
								<xsl:attribute name="id">top-nav-collapse</xsl:attribute>
								<xsl:attribute name="class">nav nav-pills collapse top-nav-collapse</xsl:attribute>
								<xsl:for-each select="//*[contains(@class,'NavigationTree')]/dd/ul/li">
									<xsl:choose>
										<xsl:when test="contains(./@class,'navTreeTopNode')">
											<xsl:element name="li">
												<xsl:element name="a">
													<xsl:attribute name="href">
														<xsl:value-of select=".//a/@href"/>
													</xsl:attribute>
													<xsl:text>Home</xsl:text>
												</xsl:element>
											</xsl:element>
										</xsl:when>
										<xsl:otherwise>
											<xsl:element name="li">
												<xsl:attribute name="class">plain</xsl:attribute>
												<xsl:copy-of select="./a"/>
											</xsl:element>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:element>
						</xsl:element>
					</xsl:element>
				</after>
			</rules>
		</rules>

		<!-- no template configured -->
		<rules css:if-not-content="#portal-column-one">
			<rules css:if-not-content="#portal-column-two">
				<theme href="page-inside-noleft-noright.html" />
			</rules>
			<theme href="page-inside-noleft.html" />
		</rules>
		<rules css:if-not-content="#portal-column-two">
			<rules css:if-not-content="#portal-column-one">
				<theme href="page-inside-noleft-noright.html" />
			</rules>
			<theme href="page-inside-noright.html" />
		</rules>

		<!-- inside-pages portlet columns -->
		<drop css:theme-children=".med-sidebars" />
		<!-- inside-pages left portlet column -->
		<rules css:if-content="#portal-column-one">
			<before css:theme-children="#sidebar-left">
				<xsl:if test="//*[@id='portal-column-one']//dl[contains(@class,'Navigation')]">
					<xsl:call-template name="portlet-navigation">
						<xsl:with-param name="portlet" select="//*[@id='portal-column-one']//dl[contains(@class,'Navigation')]"/>
						<xsl:with-param name="portletClass">
							<xsl:text>med-sidenav</xsl:text>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:for-each select="//*[@id='portal-column-one']/div[not(contains(@class,'managePortletsLink'))]/dl">
					<xsl:choose>
						<xsl:when test="contains(./@class, 'portletRecent')"></xsl:when>
						<xsl:when test="contains(./@class, 'portletLogin')"></xsl:when>
						<xsl:when test="contains(./@class, 'Navigation')"></xsl:when>
						<xsl:when test="contains(./@class, 'News')">
							<xsl:call-template name="portlet-news">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-news hidden-phone</xsl:text>
								</xsl:with-param>
								<xsl:with-param name="portletNews">
									<xsl:text>yes</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'Collection')">
							<xsl:call-template name="portlet-news">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-news hidden-phone</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'Events')">
							<xsl:call-template name="portlet-events">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-events hidden-phone</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'Calendar')">
							<xsl:call-template name="portlet-calendar">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-calendar hidden-phone</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:otherwise>
							<xsl:call-template name="portlet-default">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>hidden-phone</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</before>
			<before css:theme-children="#sidebar-right">
				<xsl:for-each select="//*[@id='portal-column-one']/div[not(contains(@class,'managePortletsLink'))]/dl">
					<xsl:choose>
						<xsl:when test="contains(./@class, 'Navigation')"></xsl:when>
						<xsl:when test="contains(./@class, 'News')">
							<xsl:call-template name="portlet-news">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-news visible-phone</xsl:text>
								</xsl:with-param>
								<xsl:with-param name="portletNews">
									<xsl:text>yes</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'Collection')">
							<xsl:call-template name="portlet-news">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-news visible-phone</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'Events')">
							<xsl:call-template name="portlet-events">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-events visible-phone</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'Calendar')">
							<xsl:call-template name="portlet-calendar">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-calendar visible-phone</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:otherwise>
							<xsl:call-template name="portlet-default">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>visible-phone</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</before>
		</rules>

		<!-- inside-pages right portlet column -->
		<rules css:if-content="#portal-column-two">
			<after css:theme-children="#sidebar-right">
				<xsl:if test="//*[@id='portal-column-two']//dl[contains(@class,'Navigation')]">
					<xsl:call-template name="portlet-navigation">
						<xsl:with-param name="portlet" select="//*[@id='portal-column-two']//dl[contains(@class,'Navigation')]"/>
						<xsl:with-param name="portletClass">
							<xsl:text>med-sidenav</xsl:text>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:for-each select="//*[@id='portal-column-two']/div[not(contains(@class,'managePortletsLink'))]/dl">
					<xsl:choose>
						<xsl:when test="contains(./@class, 'Navigation')"></xsl:when>
						<xsl:when test="contains(./@class, 'Collection')">
							<xsl:call-template name="portlet-news">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-news</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'News')">
							<xsl:call-template name="portlet-news">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-news</xsl:text>
								</xsl:with-param>
								<xsl:with-param name="portletNews">
									<xsl:text>yes</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'Events')">
							<xsl:call-template name="portlet-events">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-events</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:when test="contains(./@class, 'Calendar')">
							<xsl:call-template name="portlet-calendar">
								<xsl:with-param name="portlet" select="."/>
								<xsl:with-param name="portletClass">
									<xsl:text>med-calendar</xsl:text>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:when>
						<xsl:otherwise>
							<xsl:call-template name="portlet-default">
								<xsl:with-param name="portlet" select="."/>
							</xsl:call-template>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</after>
		</rules>

		<replace css:theme="#main-content.bio-page .content">
			<xsl:element name="div">
				<xsl:attribute name="class">
					<xsl:choose>
						<xsl:when test="count(//*[@id='portal-column-one']/div/dl[contains(@class,'bio-') and not(contains(@class,'bio-contact'))]) = 0">
							<xsl:text>span12 content</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>span9 content</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				<xsl:copy-of select="//*[@id='content-core']/div[contains(@id,'parent-fieldname-text')]/*"/>
			</xsl:element>
		</replace>
		<replace css:theme-children="#main-content .content .core-content">
			<xsl:choose>
				<xsl:when test="//body[contains(@class,'portaltype-formthankspage')]">
					<xsl:for-each select="//*[@id='content']/*[not(@class='documentFirstHeading') and not(@class='documentByLine') and not(@class='documentDescription') and not(@class='visualClear') and not(@class='documentActions')]">
						<xsl:choose>
							<xsl:when test="name(.) = 'blockquote'">
								<xsl:copy-of select="./dl"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="."/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
				</xsl:when>
				<xsl:when test="//body[contains(@class,'portaltype-formfolder')] and contains(/html/body/@class, 'login')">
					<xsl:copy-of select="//*[@id='content-core']/*"/>
				</xsl:when>
				<xsl:when test="//body[contains(@class,'portaltype-formfolder')]">
					<xsl:if css:test=".portalMessage.error">
						<xsl:element name="div">
							<xsl:attribute name="class">alert alert-error</xsl:attribute>
							<xsl:element name="p">
								<xsl:copy-of select="//*[@class='portalMessage error']/dd/text()"/>
							</xsl:element>
						</xsl:element>
					</xsl:if>
					<xsl:for-each select="//*[@id='content']/div">
						<xsl:choose>
							<xsl:when test="contains(./@id,'formPrologue') or contains(./@id,'formEpilogue')">
								<xsl:copy-of select="./*"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:element name="form">
									<xsl:copy-of select="./form/@*"/>
									<xsl:for-each select="./form/div">
										<xsl:choose>
											<xsl:when test="contains(./@id,'pfg-fieldwrapper')">
												<xsl:for-each select="./*">
													<xsl:element name="div">
														<xsl:attribute name="class">
															<xsl:value-of select="./@class"/>
															<xsl:text>control-group</xsl:text>
														</xsl:attribute>
														<xsl:copy-of select="./@*[name() != 'class']"/>
														<xsl:choose>
															<xsl:when test="./label">
																<xsl:element name="label">
																	<xsl:attribute name="class">control-label</xsl:attribute>
																	<xsl:attribute name="for">
																		<xsl:value-of select="./label/@for"/>
																	</xsl:attribute>
																	<xsl:copy-of select="./label/text()"/>
																	<xsl:copy-of select="./label/*"/>
																</xsl:element>
															</xsl:when>
															<xsl:when test=".//div[contains(@class,'label')]">
																<xsl:element name="div">
																	<xsl:attribute name="class">control-label</xsl:attribute>
																	<xsl:copy-of select=".//div[contains(@class,'label')]/text()"/>
																	<xsl:copy-of select=".//div[contains(@class,'label')]/*"/>
																</xsl:element>
															</xsl:when>
															<xsl:otherwise></xsl:otherwise>
														</xsl:choose>
														<xsl:element name="div">
															<xsl:attribute name="class">controls</xsl:attribute>
															<xsl:for-each select="./*[name() != 'label']">
																<xsl:choose>
																	<xsl:when test="./ancestor::*[contains(@class,'String') or contains(@class,'TextArea')]">
																		<xsl:copy-of select="."/>
																	</xsl:when>
																	<xsl:when test="./ancestor::*[contains(@class,'LabelWidget')]">
																		<xsl:if test="contains(@class,'formHelp')">
																			<xsl:copy-of select="."/>
																		</xsl:if>
																	</xsl:when>
																	<xsl:when test="./ancestor::*[contains(@class,'CalendarWidget')]">
																		<xsl:if test="not(contains(@class,'label'))">
																			<xsl:copy-of select="."/>
																		</xsl:if>
																	</xsl:when>
																	<xsl:when test="./ancestor::*[contains(@class,'Selection')]">
																		<xsl:choose>
																			<xsl:when test="./div[contains(@class,'MultiSelection')]">
																				<xsl:copy-of select="./div[contains(@class,'formHelp')]"/>
																				<xsl:for-each select="./div[contains(@class,'MultiSelection')]">
																					<xsl:element name="label">
																						<xsl:attribute name="class">checkbox</xsl:attribute>
																						<xsl:attribute name="for">
																							<xsl:value-of select="./input/@id"/>
																						</xsl:attribute>
																						<xsl:copy-of select="./input"/>
																						<xsl:copy-of select="./label/text()"/>
																					</xsl:element>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="./input">
																				<xsl:copy-of select="./div[contains(@class,'formHelp')]"/>
																				<xsl:for-each select="./input">
																					<xsl:element name="label">
																						<xsl:attribute name="class">radio</xsl:attribute>
																						<xsl:attribute name="for">
																							<xsl:value-of select="./@id"/>
																						</xsl:attribute>
																						<xsl:copy-of select="."/>
																						<xsl:value-of select="./following-sibling::label/text()"/>
																					</xsl:element>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:copy-of select="."/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:copy-of select="."/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:element>
													</xsl:element>
												</xsl:for-each>
											</xsl:when>
											<xsl:when test="contains(./@class,'formControls')">
												<xsl:element name="div">
													<xsl:attribute name="class">form-actions formControls</xsl:attribute>
													<xsl:for-each select="./*">
														<xsl:choose>
															<xsl:when test="not(contains(./@type,'hidden'))">
																<xsl:element name="input">
																	<xsl:choose>
																		<xsl:when test="contains(./@type,'submit')">
																			<xsl:attribute name="class">btn btn-primary</xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="class">btn</xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<xsl:copy-of select="./@*[name() != 'class']"/>
																</xsl:element>
																<xsl:text> </xsl:text>
															</xsl:when>
															<xsl:otherwise>
																<xsl:copy-of select="."/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:element>
											</xsl:when>
											<xsl:otherwise></xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:element>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
				</xsl:when>
				<xsl:when test="//body[contains(@class,'solgemafullcalendar_view')]">
					<xsl:copy-of select="//*[@id='content']/div/a[1]"/>
					<xsl:copy-of select="//*[@id='content']/div/div[@id='calendar']"/>
				</xsl:when>
				<xsl:when test="$pageTemplate/text() = 'tabbed-page' and contains(/html/body/@class, 'login')">
					<xsl:copy-of select="//*[@id='content-core']/*"/>
				</xsl:when>
				<xsl:when test="$pageTemplate/text() = 'tabbed-page'">
					<xsl:element name="ul">
						<xsl:attribute name="class">nav nav-tabs responsive tab-collapse-nav hidden-phone</xsl:attribute>
						<xsl:attribute name="id">tab-collapse</xsl:attribute>
						<xsl:for-each select="//*[@id='prefooter-rows']/*[contains(@class,'tabbed-page')]">
							<xsl:if test="position() = 1">
								<xsl:element name="li">
									<xsl:attribute name="class">active</xsl:attribute>
									<xsl:element name="a">
										<xsl:attribute name="href">#tab0</xsl:attribute>
										<xsl:attribute name="data-toggle">tab</xsl:attribute>
										<xsl:choose>
											<xsl:when test="$tabbedPageInitialTabName">
												<xsl:value-of select="$tabbedPageInitialTabName"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:text>Overview</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:element>
								</xsl:element>
							</xsl:if>
							<xsl:element name="li">
								<xsl:element name="a">
									<xsl:attribute name="href">
										<xsl:value-of select="concat('#tab',position())"/>
									</xsl:attribute>
									<xsl:attribute name="data-toggle">tab</xsl:attribute>
									<xsl:choose>
										<xsl:when test="name() = 'dl'">
											<!-- static text portlet -->
											<xsl:value-of select="substring-after(./dt[contains(@class,'Header')]/span[not(contains(@class,'portletTop'))]/text(),'tabbed page ')"/>
										</xsl:when>
										<xsl:otherwise>
											<!-- bootstrap row -->
											<xsl:value-of select="substring-after(./preceding-sibling::h3[1]/text(),'tabbed page ')"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:element>
							</xsl:element>
						</xsl:for-each>
					</xsl:element>
					<xsl:element name="div">
						<xsl:attribute name="class">tab-content responsive</xsl:attribute>
						<xsl:attribute name="id">tab-collapse-info</xsl:attribute>
						<xsl:for-each select="//*[@id='prefooter-rows']/*[contains(@class,'tabbed-page')]">
							<xsl:if test="position() = 1">
								<xsl:element name="div">
									<xsl:attribute name="class">tab-pane in active</xsl:attribute>
									<xsl:attribute name="id">tab0</xsl:attribute>
									<xsl:copy-of select="//*[@id='content-core']/div/*"/>
								</xsl:element>
							</xsl:if>
							<xsl:element name="div">
								<xsl:attribute name="class">tab-pane</xsl:attribute>
								<xsl:attribute name="id">
									<xsl:value-of select="concat('tab',position())"/>
								</xsl:attribute>
								<xsl:choose>
									<xsl:when test="name() = 'dl'">
										<!-- static text portlet -->
										<xsl:copy-of select="./dd/*[not(contains(@class,'portletBottom'))]"/>
									</xsl:when>
									<xsl:otherwise>
										<!-- bootstrap row -->
										<xsl:copy-of select="./*"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:element>
						</xsl:for-each>
					</xsl:element>
				</xsl:when>
				<xsl:otherwise>
					<xsl:copy-of select="//*[@id='content-core']/*"/>
				</xsl:otherwise>
			</xsl:choose>
		</replace>

		<!-- add news byline date -->
		<after css:if-content="body[class*='newsitem_view']" css:theme="#main-content .content > h1.visible-phone">
			<xsl:element name="div">
				<xsl:attribute name="class">documentModified</xsl:attribute>
				<xsl:copy-of select="//*[@id='content']//*[contains(@class,'documentByLine')]//*[contains(@class,'documentModified')]/text()"/>
			</xsl:element>
		</after>

		<drop css:theme="#main-content .content .description" css:if-not-content="#content .documentDescription" />
		<replace css:theme-children="#main-content .content .description" css:content-children="#content .documentDescription" />
		<replace css:theme-children="#main-content .content > h1, #main-content > h1" css:content-children="#content > h1" />

		<!--
		<before css:theme="#main-content .content .core-content" content="//*[@id='content']/div[contains(@class,'formPrologue')]/*" />
		<after css:theme="#main-content .content .core-content" content="//*[@id='content']/div[contains(@class,'formepilogue')]/*" />
		-->
	</rules>

</rules>